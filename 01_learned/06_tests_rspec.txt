to run tests you run

  bundle exec rspec

to use helper methods from the devise gem and factory_bot gem in your rspec tests
  you have to make changes to spec/rails_helper.rb

  make sure to add these 2 configs
    RSpec.configure do |config|
      config.include FactoryBot::Syntax::Methods
      ...
      config.include Devise::Test::IntegrationHelpers, type: :request
    end

    the line
      config.include Devise::Test::IntegrationHelpers, type: :request

        will allow you to use methods in your rspec tests like
          sign_in
          sign_out
          current_user

    and the line
      config.include FactoryBot::Syntax::Methods

        will allow you to use methods in your rspec tests like
          create # to create instances of a factory with the specified attributes

helper methods normally used from the rspec gem

  let
    to define memoized helper methods within a test suite
      * memoized value: value computed the first time then cached and reused next time is called without computing it again

      this is useful when you need a value that needs information from the database but you only need to access it once and then reuse the value

  before
    to define a block that runs before every test example

  with these two helpers you can avoid doing this in every example to sign in a user
    user = create(:user)
    sign_in user


an example of how a test can be done

  in the file spec/models/user_spec.rb you can have these tests:

    require 'rails_helper'

    RSpec.describe User, type: :model do
      it { should have_many(:tweets).dependent(:destroy) }
      it { should validate_uniqueness_of(:username).case_insensitive.allow_blank }
    end


if you need to freeze time for your tests to be accurate

  you can use the time helper methods that come built in

  to use them you need to add them to the configuration in the spec/rails_helper.rb

    RSpec.configure do |config|
      ...
      config.include ActiveSupport::Testing::TimeHelpers
    end

    travel_to

    travel_back

    this way you avoid using another gem like time_cop
