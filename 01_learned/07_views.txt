generally speaking you want to avoid putting logic in your view
  most of your logic should be running in your backend
    the frontend is mostly used to present data that was calculated in the backend

  example
    use a controller action specifically for users that are logged out
    and then create a controller action specifically for users that are signed in
    this way you can have separate views with less logic for this different cases instead of gathering all logic in just one single view


an example on a form in a view with erb

<%= form_with model: Tweet.new, url: tweets_path, local: true do |f| %>
  <%= f.text_field :body %>
  <%= f.submit %>
<% end %>

tweets_path is the path where you make your POST requests to create new tweets
  you can also use a GET to this same path to get all tweets

remember to try to avoid putting logic in views as much as possible

in a form view
  the f.submit will have a default text but you can set it to a different text
    example
      <%= f.submit "Tweet", class: "btn btn-lg btn-twitter rounded-pill" %>

      here the submit button will have the text "Tweet"

you can create partials where you see that code is reusable or to make the view more readable

  you can create a file like app/views/shared/_sidebar.html.erb

    where you can put like a in regular view

      and then to use it in another view you can do this:

        <%= render 'shared/sidebar' %>

        * notice how the '_' character is not needed when using the partial

to render a partial with extra parameters

  you can use this short form

    <%= render "tweets/tweet", tweet_presenter: tweet_presenter %>

  or this long more detailed form

    <%= render partial: "tweets/tweet", locals: { tweet_presenter: tweet_presenter } %>

  but do not combine them like this or you will get errors hard to debug

    do not do this: <%= render "tweets/tweet", locals: { tweet_presenter: tweet_presenter } %>

to render a mapped partial

  instead of doing this
    <% Tweet.order(created_at: :desc).each do |tweet| %>
      <%= render "tweets/tweet", tweet: tweet %>
    <% end %>

  you can do this
    <%= render Tweet.order(created_at: :desc) %>

  this is rails using conventions that can simplify the code. in the second case a collection of ActiveRecord objects is passed to render so it:
    automatically looks for a partial with a name based on the model name. in this case looks for "tweets/_tweet.html.erb" automatically
      and renders that partial for each object in the collection

    automatically assigns each object to a local variable named after the partial



  another more complex example
    instead of doing this
      <% Tweet.order(created_at: :desc).map { |tweet| TweetPresenter.new(tweet) }.each do |tweet_presenter| %>
        <%= render "tweets/tweet", tweet_presenter: tweet_presenter %>
      <% end %>

    you can do this

      <%= render partial: "tweets/tweet", collection: Tweet.order(created_at: :desc).map { |tweet| TweetPresenter.new(tweet) }, as: :tweet_presenter %>



helpers that only works in a view and not in other files like controllers

  time_ago_in_words -- coming from ActionView::Helpers::DateHelper